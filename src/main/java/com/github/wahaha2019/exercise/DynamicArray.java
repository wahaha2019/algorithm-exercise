/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package com.github.wahaha2019.exercise;

/**
 * DynamicArray is not thread safe. element can be null.
 */
public class DynamicArray<E> {
  private static final int DEFAULT_CAPACITY = 256;
  private final double expendRatio = 1.5D;
  private final int expendStep = 8;
  protected int size;
  protected Object[] data;

  static DynamicArray<Integer> newIntSerial(int size) {
    DynamicArray<Integer> array = new DynamicArray<>(size);
    fillIntSerial(size, array);
    return array;
  }

  static void fillIntSerial(int size, DynamicArray array) {
    array.setSize(size);
    for (int i = 0; i < size; i++) {
      array.data[i] = i;
    }
  }

  static void fillIntSerial(int begin, int step, int size, DynamicArray array) {
    array.setSize(size);
    for (int i = 0; i < size; i++) {
      array.data[i] = begin + i * step;
    }
  }

  public DynamicArray(int capacity) {
    if (capacity <= 0) {
      throw new IllegalArgumentException("Array capacity must greater than 0");
    }
    data = new Object[capacity];
    size = 0;
  }

  public DynamicArray() {
    this(DEFAULT_CAPACITY);
  }

  public boolean isEmpty() {
    return size == 0;
  }

  public boolean isFull() {
    return size == getCapacity();
  }

  public int getSize() {
    return size;
  }

  public void setSize(int size) {
    if (size <= 0) {
      throw new IllegalArgumentException("Array size must greater than 0");
    }
    if (size > getCapacity()) {
      Object[] newData = new Object[size];
      for (int i = 0; i < this.size; i++) {
        newData[i] = data[i];
        data[i] = null;
      }
      data = newData;
    } else {
      for (int i = size; i < this.size; i++) {
        data[i] = null;
      }
    }
    this.size = size;
  }

  public void clear() {
    for (int i = 0; i < size; i++) {
      data[i] = null;
    }
    size = 0;
  }

  public int getCapacity() {
    return data.length;
  }

  public E get(int i) {
    checkIndex(i);
    return (E) data[i];
  }

  public void set(int i, E ele) {
    checkIndex(i);
    data[i] = ele;
  }

  public void insert(int i, E ele) {
    checkIndex(i);
    if (i == Integer.MAX_VALUE) {
      throw new IllegalArgumentException("Array size is max, can not insert any more.");
    }
    if (size + 1 <= getCapacity()) {
      for (int j = size - 1; j >= i; j--) {
        data[j + 1] = data[j];
      }
      data[i] = ele;
    } else {
      long newCapacity = Math.round(getCapacity() * expendRatio);
      if (newCapacity <= getCapacity()) {
        newCapacity += expendStep;
      }
      if (newCapacity > Integer.MAX_VALUE) {
        newCapacity = Integer.MAX_VALUE;
      }
      Object[] newData = new Object[(int) newCapacity];
      for (int j = i; j < size; j++) {
        newData[j + 1] = data[j];
        data[j] = null;
      }
      newData[i] = ele;
      for (int j = 0; j < i; j++) {
        newData[j] = data[j];
        data[j] = null;
      }
      data = newData;
    }
    size++;
  }

  public void delete(int i) {
    checkIndex(i);
    for (int j = i; j < size - 1; j++) {
      data[j] = data[j + 1];
    }
    data[size - 1] = null;
    size--;
  }

  public void append(E ele) {
    if (getCapacity() == Integer.MAX_VALUE) {
      throw new IllegalArgumentException("Array size is max, can not append any more.");
    }
    setSize(size + 1);
    data[size - 1] = ele;
  }

  public void deleteToTop(int i) {
    checkIndex(i);
    int diff = i + 1;
    int limit = size - diff;
    for (int j = 0; j < limit; j++) {
      data[j] = data[j + diff];
    }
    for (int j = limit; j < size; j++) {
      data[j] = null;
    }
    size = limit;
  }

  public void deleteToEnd(int i) {
    checkIndex(i);
    for (int j = i; j < size; j++) {
      data[j] = null;
    }
    size = i;
  }

  private void checkIndex(int i) {
    if (i >= size || i < 0) {
      throw new ArrayIndexOutOfBoundsException("size is " + size + "; index is " + i);
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (!(obj instanceof DynamicArray)) {
      return false;
    }
    DynamicArray other = (DynamicArray) obj;
    if (this.size != other.size) {
      return false;
    } else if (this.size == 0 && other.size == 0) {
      return true;
    }
    for (int i = 0; i < size; i++) {
      if (this.data[i] == null) {
        if (other.data[i] != null) {
          return false;
        }
      } else if (!this.data[i].equals(other.data[i])) {
        return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    int result = 1;
    for (int i = 0; i < size; i++) {
      result = 31 * result + (data[i] == null ? 0 : data[i].hashCode());
    }
    result = 31 * result + size;
    return result;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder(64);
    sb.append("DynamicArray{size=");
    sb.append(size);
    sb.append(",");
    sb.append("data={");
    for (int i = 0; i < size; i++) {
      sb.append(data[i]);
      if (i < size - 1) {
        sb.append(',');
      }
    }
    sb.append("}}");
    return sb.toString();
  }
}
